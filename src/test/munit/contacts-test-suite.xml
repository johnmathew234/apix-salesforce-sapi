<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="contacts-test-suite.xml" />
	<munit:test name="contacts-test-suite-query-all-contacts-flowTest" doc:id="27f85739-cd43-4c69-a1ce-7f26e9493895" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="5df600af-d214-496c-bb6f-283edcc17fca" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8a591134-bac8-4607-b129-aef5f206005d" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[[&#10;  {&#10;    &quot;Email&quot;: &quot;vibinviswanath14@gmail.com&quot;,&#10;    &quot;FirstName&quot;: &quot;jh&quot;,&#10;    &quot;Phone&quot;: &quot;97987987&quot;,&#10;    &quot;Title&quot;: &quot;DEVELOPER&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;kh&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;rose@edge.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Rose&quot;,&#10;    &quot;Phone&quot;: &quot;(512) 757-6000&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Procurement&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Gonzalez&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;sean@edge.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Sean&quot;,&#10;    &quot;Phone&quot;: &quot;(512) 757-6000&quot;,&#10;    &quot;Title&quot;: &quot;CFO&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Forbes&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;jrogers@burlington.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Jack&quot;,&#10;    &quot;Phone&quot;: &quot;(336) 222-7000&quot;,&#10;    &quot;Title&quot;: &quot;VP, Facilities&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Rogers&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;pat@pyramid.net&quot;,&#10;    &quot;FirstName&quot;: &quot;Pat&quot;,&#10;    &quot;Phone&quot;: &quot;(014) 427-4427&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Administration and Finance&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Stumuller&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;a_young@dickenson.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Andy&quot;,&#10;    &quot;Phone&quot;: &quot;(785) 241-6200&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Operations&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Young&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;barr_tim@grandhotels.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Tim&quot;,&#10;    &quot;Phone&quot;: &quot;(312) 596-1000&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Administration and Finance&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Barr&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;bond_john@grandhotels.com&quot;,&#10;    &quot;FirstName&quot;: &quot;John&quot;,&#10;    &quot;Phone&quot;: &quot;(312) 596-1000&quot;,&#10;    &quot;Title&quot;: &quot;VP, Facilities&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Bond&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;spavlova@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Stella&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Production&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Pavlova&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;lboyle@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Lauren&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Technology&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Boyle&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;b.levy@expressl&amp;t.net&quot;,&#10;    &quot;FirstName&quot;: &quot;Babara&quot;,&#10;    &quot;Phone&quot;: &quot;(503) 421-7800&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Operations&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Levy&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;j.davis@expressl&amp;t.net&quot;,&#10;    &quot;FirstName&quot;: &quot;Josh&quot;,&#10;    &quot;Phone&quot;: &quot;(503) 421-7800&quot;,&#10;    &quot;Title&quot;: &quot;Director, Warehouse Mgmt&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Davis&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;jane_gray@uoa.edu&quot;,&#10;    &quot;FirstName&quot;: &quot;Jane&quot;,&#10;    &quot;Phone&quot;: &quot;(520) 773-9050&quot;,&#10;    &quot;Title&quot;: &quot;Dean of Administration&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Grey&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;asong@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Arthur&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;CEO&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Song&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;ajames@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Ashley&quot;,&#10;    &quot;Phone&quot;: &quot;+44 191 4956203&quot;,&#10;    &quot;Title&quot;: &quot;VP, Finance&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;James&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;tripley@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Tom&quot;,&#10;    &quot;Phone&quot;: &quot;(650) 450-8810&quot;,&#10;    &quot;Title&quot;: &quot;Regional General Manager&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Ripley&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;ldcruz@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Liz&quot;,&#10;    &quot;Phone&quot;: &quot;(650) 450-8810&quot;,&#10;    &quot;Title&quot;: &quot;VP, Production&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;D'Cruz&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;efrank@genepoint.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Edna&quot;,&#10;    &quot;Phone&quot;: &quot;(650) 867-3450&quot;,&#10;    &quot;Title&quot;: &quot;VP, Technology&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Frank&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;agreen@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Avi&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;CFO&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Green&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: null,&#10;    &quot;FirstName&quot;: &quot;Siddartha&quot;,&#10;    &quot;Phone&quot;: null,&#10;    &quot;Title&quot;: null,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Nedaerk&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: null,&#10;    &quot;FirstName&quot;: &quot;Jake&quot;,&#10;    &quot;Phone&quot;: null,&#10;    &quot;Title&quot;: null,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Llorrac&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  }&#10;]]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="query-all-contacts-flow" doc:id="35ce7a22-d406-48ab-acff-1d30a3281042" name="query-all-contacts-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="4110d861-8180-4bdf-ba1e-a38bc35af98b" actual="#[payload]" expected="#[[&#10;  {&#10;    &quot;Email&quot;: &quot;vibinviswanath14@gmail.com&quot;,&#10;    &quot;FirstName&quot;: &quot;jh&quot;,&#10;    &quot;Phone&quot;: &quot;97987987&quot;,&#10;    &quot;Title&quot;: &quot;DEVELOPER&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;kh&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;rose@edge.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Rose&quot;,&#10;    &quot;Phone&quot;: &quot;(512) 757-6000&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Procurement&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Gonzalez&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;sean@edge.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Sean&quot;,&#10;    &quot;Phone&quot;: &quot;(512) 757-6000&quot;,&#10;    &quot;Title&quot;: &quot;CFO&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Forbes&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;jrogers@burlington.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Jack&quot;,&#10;    &quot;Phone&quot;: &quot;(336) 222-7000&quot;,&#10;    &quot;Title&quot;: &quot;VP, Facilities&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Rogers&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;pat@pyramid.net&quot;,&#10;    &quot;FirstName&quot;: &quot;Pat&quot;,&#10;    &quot;Phone&quot;: &quot;(014) 427-4427&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Administration and Finance&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Stumuller&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;a_young@dickenson.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Andy&quot;,&#10;    &quot;Phone&quot;: &quot;(785) 241-6200&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Operations&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Young&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;barr_tim@grandhotels.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Tim&quot;,&#10;    &quot;Phone&quot;: &quot;(312) 596-1000&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Administration and Finance&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Barr&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;bond_john@grandhotels.com&quot;,&#10;    &quot;FirstName&quot;: &quot;John&quot;,&#10;    &quot;Phone&quot;: &quot;(312) 596-1000&quot;,&#10;    &quot;Title&quot;: &quot;VP, Facilities&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Bond&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;spavlova@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Stella&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Production&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Pavlova&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;lboyle@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Lauren&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Technology&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Boyle&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;b.levy@expressl&amp;t.net&quot;,&#10;    &quot;FirstName&quot;: &quot;Babara&quot;,&#10;    &quot;Phone&quot;: &quot;(503) 421-7800&quot;,&#10;    &quot;Title&quot;: &quot;SVP, Operations&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Levy&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;j.davis@expressl&amp;t.net&quot;,&#10;    &quot;FirstName&quot;: &quot;Josh&quot;,&#10;    &quot;Phone&quot;: &quot;(503) 421-7800&quot;,&#10;    &quot;Title&quot;: &quot;Director, Warehouse Mgmt&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Davis&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;jane_gray@uoa.edu&quot;,&#10;    &quot;FirstName&quot;: &quot;Jane&quot;,&#10;    &quot;Phone&quot;: &quot;(520) 773-9050&quot;,&#10;    &quot;Title&quot;: &quot;Dean of Administration&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Grey&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;asong@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Arthur&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;CEO&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Song&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;ajames@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Ashley&quot;,&#10;    &quot;Phone&quot;: &quot;+44 191 4956203&quot;,&#10;    &quot;Title&quot;: &quot;VP, Finance&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;James&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;tripley@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Tom&quot;,&#10;    &quot;Phone&quot;: &quot;(650) 450-8810&quot;,&#10;    &quot;Title&quot;: &quot;Regional General Manager&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Ripley&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;ldcruz@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Liz&quot;,&#10;    &quot;Phone&quot;: &quot;(650) 450-8810&quot;,&#10;    &quot;Title&quot;: &quot;VP, Production&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;D'Cruz&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;efrank@genepoint.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Edna&quot;,&#10;    &quot;Phone&quot;: &quot;(650) 867-3450&quot;,&#10;    &quot;Title&quot;: &quot;VP, Technology&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Frank&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: &quot;agreen@uog.com&quot;,&#10;    &quot;FirstName&quot;: &quot;Avi&quot;,&#10;    &quot;Phone&quot;: &quot;(212) 842-5500&quot;,&#10;    &quot;Title&quot;: &quot;CFO&quot;,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Green&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: null,&#10;    &quot;FirstName&quot;: &quot;Siddartha&quot;,&#10;    &quot;Phone&quot;: null,&#10;    &quot;Title&quot;: null,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Nedaerk&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  },&#10;  {&#10;    &quot;Email&quot;: null,&#10;    &quot;FirstName&quot;: &quot;Jake&quot;,&#10;    &quot;Phone&quot;: null,&#10;    &quot;Title&quot;: null,&#10;    &quot;Id&quot;: null,&#10;    &quot;LastName&quot;: &quot;Llorrac&quot;,&#10;    &quot;type&quot;: &quot;Contact&quot;&#10;  }&#10;]]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="contacts-test-suite-query-contacts-by-id-flowTest" doc:id="970a9c48-e539-41f7-b860-f160b335cfa5" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="0648f0b7-add3-46ec-9fd5-aab383b8e6a4" processor="salesforce:query">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2c13a8db-5451-40d3-8425-609bd43c6beb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[&#10;    {&#10;        "Email": "rose@edge.com",&#10;        "FirstName": "Rose",&#10;        "Phone": "(512) 757-6000",&#10;        "Title": "SVP, Procurement",&#10;        "Id": null,&#10;        "LastName": "Gonzalez",&#10;        "type": "Contact"&#10;    }&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event" doc:id="e68907df-155c-4803-9a53-8d2d2f530bc4" >
				<munit:attributes value='#[{"uriParams":{"contactid":"0015g000002YSB7AAO"}}]' />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name=" query-contacts-by-id-flow" doc:id="cc6d19a0-7fd7-4898-b531-b6ac6d9e8dff" name="query-contacts-by-id-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="e8d4d503-0e0e-481b-a6ef-a10435f24d6d" actual="#[payload]" expected='#[[&#10;  {&#10;    "Email": "rose@edge.com",&#10;    "FirstName": "Rose",&#10;    "Phone": "(512) 757-6000",&#10;    "Title": "SVP, Procurement",&#10;    "Id": null,&#10;    "LastName": "Gonzalez",&#10;    "type": "Contact"&#10;  }&#10;]]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="contacts-test-suite-post-contact-flowTest" doc:id="36fcbb61-7126-424e-acfc-910433e8e801" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="eb5b2796-4642-450e-b4b9-c30bcc03d71d" processor="salesforce:create">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ed109478-be16-4bb7-90ea-b3b3dd7306d1" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[{&#10;    "id": null,&#10;    "items": [&#10;        {&#10;            "exception": null,&#10;            "message": null,&#10;            "payload": {&#10;                "success": true,&#10;                "id": "0035g00000FMAQsAAP",&#10;                "errors": []&#10;            },&#10;            "id": "0035g00000FMAQsAAP",&#10;            "statusCode": null,&#10;            "successful": true&#10;        }&#10;    ],&#10;    "successful": true&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event" doc:id="2af96f1f-6fef-4b16-91c3-4451a0ba9a7e" >
				<munit:payload value='#[[ {&#10;        "Email": "vibinviswanath14@gmail.com",&#10;        "FirstName": "jhooonggv",&#10;        "Phone": "97987987",&#10;        "Title": "DEVELOPER",&#10;        "Id": null,&#10;        "LastName": "kh",&#10;        "type": "Contact"&#10;    }]]' />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="post-contact-flow" doc:id="4d9cdfe2-999a-47de-abe2-44874e378ac7" name="post-contact-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="1976e9c1-ce83-4614-8618-a93d64f0365a" actual="#[payload]" expected='#[{&#10;    "id": null,&#10;    "items": [&#10;        {&#10;            "exception": null,&#10;            "message": null,&#10;            "payload": {&#10;                "success": true,&#10;                "id": "0035g00000FMAQsAAP",&#10;                "errors": []&#10;            },&#10;            "id": "0035g00000FMAQsAAP",&#10;            "statusCode": null,&#10;            "successful": true&#10;        }&#10;    ],&#10;    "successful": true&#10;}]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="contacts-test-suite-upsert-contact-flowTest" doc:id="02317edc-e754-4b1e-81df-a026f8b1d6b6" description="Test">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="09c5ac5d-b402-473e-84f6-53794a501def" processor="salesforce:upsert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a63cf839-070c-44c5-86a3-5044eb4e5368" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[{&#10;    "id": null,&#10;    "items": [&#10;        {&#10;            "exception": null,&#10;            "message": null,&#10;            "payload": {&#10;                "created": false,&#10;                "success": true,&#10;                "id": "0035g00000FMAQsAAP",&#10;                "errors": []&#10;            },&#10;            "id": "0035g00000FMAQsAAP",&#10;            "statusCode": null,&#10;            "successful": true&#10;        }&#10;    ],&#10;    "successful": true&#10;}&#10;&#10;&#10;&#10;]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Event" doc:id="20570014-aa37-4749-ab73-6ca732fe02c2" >
				<munit:payload value='#[  {&#10;        "Email": "vibinviswanath14@gmail.com",&#10;        "FirstName": "jh",&#10;        "Phone": "9847292097",&#10;        "Title": "DEVELOPER",&#10;        "Id": "0035g00000FMAQsAAP",&#10;        "LastName": "kh",&#10;        "type": "Contact"&#10;    }&#10;]' />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="upsert-contact-flow" doc:id="c5ae0bff-95a0-4df1-82d1-b49e7c9964ad" name="upsert-contact-flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="f7ee1dbf-1c43-4005-886a-cd19cee3ba2d" actual="#[payload]" expected='#[{&#10;    "id": null,&#10;    "items": [&#10;        {&#10;            "exception": null,&#10;            "message": null,&#10;            "payload": {&#10;                "created": false,&#10;                "success": true,&#10;                "id": "0035g00000FMAQsAAP",&#10;                "errors": []&#10;            },&#10;            "id": "0035g00000FMAQsAAP",&#10;            "statusCode": null,&#10;            "successful": true&#10;        }&#10;    ],&#10;    "successful": true&#10;}]'/>
		</munit:validation>
	</munit:test>


</mule>
